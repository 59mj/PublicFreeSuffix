name: DNS Sync

on:
  # PR merge trigger
  pull_request_target:
    types: [closed]
    paths:
      - 'whois/*.json'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain name (e.g., example.no.kg)'
        required: false
        type: string
      operation:
        description: 'Operation type'
        required: false
        type: choice
        options:
          - 'add'
          - 'update'
          - 'delete'
          - 'auto'
      whois_file:
        description: 'WHOIS file path (relative to whois directory)'
        required: false
        type: string
      force_sync:
        description: 'Force sync (ignore errors)'
        required: false
        type: boolean
        default: false

# Global permissions
permissions: write-all

jobs:
  dns-sync:
    runs-on: ubuntu-latest
    name: DNS Synchronization
    
    # Execute condition: PR merge or manual trigger
    if: |
      (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.MY_GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      working-directory: .github/scripts
      run: |
        # Ensure package-lock.json is generated
        if [ ! -f "package-lock.json" ]; then
          npm install
        fi
        # Use ci for clean installation
        npm ci

    # Determine trigger type and parameters
    - name: Determine trigger type and parameters
      id: trigger-info
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "trigger_type=manual" >> $GITHUB_OUTPUT
          echo "domain=${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT
          echo "operation=${{ github.event.inputs.operation }}" >> $GITHUB_OUTPUT
          echo "whois_file=${{ github.event.inputs.whois_file }}" >> $GITHUB_OUTPUT
          echo "force_sync=${{ github.event.inputs.force_sync }}" >> $GITHUB_OUTPUT
          echo "triggered_by=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "trigger_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        else
          echo "trigger_type=pr_merge" >> $GITHUB_OUTPUT
          echo "domain=" >> $GITHUB_OUTPUT
          echo "operation=" >> $GITHUB_OUTPUT
          echo "whois_file=" >> $GITHUB_OUTPUT
          echo "force_sync=false" >> $GITHUB_OUTPUT
          echo "triggered_by=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "trigger_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        fi

    # Get PR information (only for PR trigger)
    - name: Get PR information
      id: pr-info
      if: steps.trigger-info.outputs.trigger_type == 'pr_merge'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.MY_GITHUB_TOKEN }}
        script: |
          try {
            const prNumber = context.payload.pull_request.number;
            
            // Get PR information
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });
            
            // Get file changes
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: parseInt(prNumber)
            });
            
            // Ensure all outputs have values
            core.setOutput('pr-title', pullRequest.title || '');
            core.setOutput('pr-body', pullRequest.body || '');
            core.setOutput('pr-number', prNumber.toString());
            core.setOutput('pr-author', pullRequest.user?.login || 'unknown');
            core.setOutput('files', JSON.stringify(files || []));
            core.setOutput('head-sha', pullRequest.head?.sha || '');
            core.setOutput('merge-sha', pullRequest.merge_commit_sha || '');
            
          } catch (error) {
            core.setFailed(`Failed to get PR information: ${error.message}`);
            // Set default values to prevent subsequent steps from failing
            core.setOutput('pr-title', '');
            core.setOutput('pr-body', '');
            core.setOutput('pr-number', '0');
            core.setOutput('pr-author', 'unknown');
            core.setOutput('files', '[]');
            core.setOutput('head-sha', '');
            core.setOutput('merge-sha', '');
          }

    # Debug information (minimal)
    - name: Debug trigger information
      if: always()
      run: |
        echo "Trigger: ${{ steps.trigger-info.outputs.trigger_type }} by ${{ steps.trigger-info.outputs.triggered_by }}"
        if [ "${{ steps.trigger-info.outputs.trigger_type }}" = "pr_merge" ]; then
          echo "PR: #${{ steps.pr-info.outputs.pr-number }} - ${{ steps.pr-info.outputs.pr-title }}"
        fi

    # Handle WHOIS files for PR trigger
    - name: Handle WHOIS files for PR trigger
      id: handle-whois-pr
      if: steps.trigger-info.outputs.trigger_type == 'pr_merge'
      run: |
        # Set safe shell options
        set -euo pipefail
        
        # Create separate directory for WHOIS files
        mkdir -p /tmp/whois_files
        
        # Get file changes from PR
        FILES=$(echo '${{ steps.pr-info.outputs.files }}' | jq -r '.[] | select(.filename | startswith("whois/")) | .filename')
        echo "Processing WHOIS files: $FILES"
        
        # Determine operation type from PR title only
        PR_TITLE="${{ steps.pr-info.outputs.pr-title }}"
        
        # Default to 'auto' operation
        OPERATION="auto"
        
        # Determine operation type from PR title format: "Registration/Update/Remove: domain"
        if [[ "$PR_TITLE" =~ ^[Rr]egistration: ]]; then
          OPERATION="add"
        elif [[ "$PR_TITLE" =~ ^[Uu]pdate: ]]; then
          OPERATION="update"
        elif [[ "$PR_TITLE" =~ ^[Rr]emove: ]]; then
          OPERATION="delete"
        else
          # Fallback to pattern matching for backward compatibility
          if [[ "$PR_TITLE" =~ [Rr]egistration ]]; then
            OPERATION="add"
          elif [[ "$PR_TITLE" =~ [Uu]pdate ]]; then
            OPERATION="update"
          elif [[ "$PR_TITLE" =~ [Rr]emove ]]; then
            OPERATION="delete"
          else
            OPERATION="auto"
          fi
        fi
        
        echo "Operation: $OPERATION"
        
        if [ "$OPERATION" = "delete" ]; then
          # For delete operations, extract file content from PR patch information
          echo "Processing delete operation - extracting file content from PR patch"
          
          # Get the file information including patch data
          FILE_INFO=$(echo '${{ steps.pr-info.outputs.files }}' | jq -r '.[] | select(.filename | startswith("whois/"))')
          
          if [ -z "$FILE_INFO" ]; then
            echo "❌ No WHOIS file information found in PR"
            exit 1
          fi
          
          # Extract filename and status
          FILENAME=$(echo "$FILE_INFO" | jq -r '.filename')
          STATUS=$(echo "$FILE_INFO" | jq -r '.status')
          
          echo "File: $FILENAME, Status: $STATUS"
          
          if [ "$STATUS" != "removed" ]; then
            echo "❌ Expected file status 'removed' for delete operation, but got '$STATUS'"
            exit 1
          fi
          
          # Extract file content from patch (for removed files, patch contains the original content)
          PATCH=$(echo "$FILE_INFO" | jq -r '.patch')
          
          if [ -z "$PATCH" ] || [ "$PATCH" = "null" ]; then
            echo "❌ No patch information available for file $FILENAME"
            exit 1
          fi
          
          # Parse patch to extract the original file content
          # Patch format for removed files: @@ -1,15 +0,0 @@ followed by the original content with - prefix
          echo "Extracting file content from patch..."
          
          # Extract the content lines (lines starting with - but not @@)
          # Remove the leading - and reconstruct the JSON with proper formatting
          # Handle multi-line JSON content properly
          FILE_CONTENT=$(echo "$PATCH" | grep '^-' | sed 's/^-//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' | tr '\n' ' ' | sed 's/  */ /g')
          
          if [ -z "$FILE_CONTENT" ]; then
            echo "❌ Failed to extract file content from patch"
            echo "Patch content: $PATCH"
            exit 1
          fi
          
          # Validate JSON format
          if ! echo "$FILE_CONTENT" | jq empty 2>/dev/null; then
            echo "❌ Extracted content is not valid JSON"
            echo "Extracted content: $FILE_CONTENT"
            echo "Original patch: $PATCH"
            exit 1
          fi
          
          # Write the extracted content to a temporary file with proper formatting
          EXTRACTED_FILE="/tmp/whois_files/$(basename "$FILENAME")"
          echo "$FILE_CONTENT" | jq . > "$EXTRACTED_FILE"
          
          echo "✅ Successfully extracted and validated JSON content"
          echo "File size: $(wc -c < "$EXTRACTED_FILE") bytes"
          
          echo "✅ Successfully extracted file content for deletion: $EXTRACTED_FILE"
          
        else
          # For add/update operations, use merged repository state
          for file in $FILES; do
            if [ -f "$file" ]; then
              # Validate JSON format
              if ! jq empty "$file" 2>/dev/null; then
                echo "❌ JSON validation failed for $file"
                exit 1
              fi
              # Copy to separate directory
              cp "$file" "/tmp/whois_files/"
            else
              echo "❌ File $file not found in merged repository"
              exit 1
            fi
          done
        fi
        
        # Set output for script
        echo "whois_file_path=/tmp/whois_files" >> $GITHUB_OUTPUT
        echo "operation=$OPERATION" >> $GITHUB_OUTPUT

    # Handle WHOIS files for manual trigger
    - name: Handle WHOIS files for manual trigger
      id: handle-whois-manual
      if: steps.trigger-info.outputs.trigger_type == 'manual'
      run: |
        # Set safe shell options
        set -euo pipefail
        
        # Create separate directory for WHOIS files
        mkdir -p /tmp/whois_files
        
        # If specific file is specified
        if [ -n "${{ steps.trigger-info.outputs.whois_file }}" ]; then
          WHOIS_FILE="whois/${{ steps.trigger-info.outputs.whois_file }}"
          if [ -f "$WHOIS_FILE" ]; then
            # Validate JSON format
            if ! jq empty "$WHOIS_FILE" 2>/dev/null; then
              echo "❌ JSON validation failed for $WHOIS_FILE"
              if [ "${{ steps.trigger-info.outputs.force_sync }}" = "false" ]; then
                exit 1
              fi
            fi
            # Copy to separate directory
            cp "$WHOIS_FILE" "/tmp/whois_files/"
          else
            echo "❌ Specified WHOIS file not found: $WHOIS_FILE"
            if [ "${{ steps.trigger-info.outputs.force_sync }}" = "false" ]; then
              exit 1
            fi
          fi
        else
          # If domain is specified, try to find corresponding file
          if [ -n "${{ steps.trigger-info.outputs.domain }}" ]; then
            DOMAIN="${{ steps.trigger-info.outputs.domain }}"
            DOMAIN_FILE="whois/${DOMAIN}.json"
            if [ -f "$DOMAIN_FILE" ]; then
              # Validate JSON format
              if ! jq empty "$DOMAIN_FILE" 2>/dev/null; then
                echo "❌ JSON validation failed for $DOMAIN_FILE"
                if [ "${{ steps.trigger-info.outputs.force_sync }}" = "false" ]; then
                  exit 1
                fi
              fi
              # Copy to separate directory
              cp "$DOMAIN_FILE" "/tmp/whois_files/"
            else
              echo "⚠️  No WHOIS file found for domain: $DOMAIN"
            fi
          fi
        fi
        
        # Set output for script
        echo "whois_file_path=/tmp/whois_files" >> $GITHUB_OUTPUT
        echo "operation=${{ steps.trigger-info.outputs.operation }}" >> $GITHUB_OUTPUT

    # Execute DNS sync script
    - name: Execute DNS Sync
      id: dns-sync
      working-directory: .github/scripts
      run: |
        # Set environment variables
        export PDA_API_URL="${{ secrets.PDA_API_URL }}"
        export PDA_API_KEY="${{ secrets.PDA_API_KEY }}"
        
        # Set WHOIS file path from previous steps
        export WHOIS_FILE_PATH="${{ steps.handle-whois-pr.outputs.whois_file_path || steps.handle-whois-manual.outputs.whois_file_path }}"
        export OPERATION="${{ steps.handle-whois-pr.outputs.operation || steps.handle-whois-manual.outputs.operation }}"
        
        # Set different parameters based on trigger type
        if [ "${{ steps.trigger-info.outputs.trigger_type }}" = "manual" ]; then
          export PR_TITLE="Manual DNS Sync - ${{ steps.trigger-info.outputs.triggered_by }}"
          export MANUAL_DOMAIN="${{ steps.trigger-info.outputs.domain }}"
          export MANUAL_OPERATION="${{ steps.trigger-info.outputs.operation }}"
          export MANUAL_WHOIS_FILE="${{ steps.trigger-info.outputs.whois_file }}"
          export FORCE_SYNC="${{ steps.trigger-info.outputs.force_sync }}"
          # Write empty PR files for manual trigger
          echo "[]" > pr-files.json
        else
          export PR_TITLE="${{ steps.pr-info.outputs.pr-title }}"
          export MANUAL_DOMAIN=""
          export MANUAL_OPERATION=""
          export MANUAL_WHOIS_FILE=""
          export FORCE_SYNC="false"
          # Write PR files to JSON file to avoid shell parsing issues
          echo '${{ steps.pr-info.outputs.files }}' > pr-files.json
        fi
        
        # Execute DNS sync script
        node dns-sync.js

    # Create run summary
    - name: Create run summary
      id: run-summary
      if: always()
      run: |
        echo "DNS Sync Summary" > summary.md
        echo "Trigger: ${{ steps.trigger-info.outputs.trigger_type }} by ${{ steps.trigger-info.outputs.triggered_by }}" >> summary.md
        
        if [ "${{ steps.trigger-info.outputs.trigger_type }}" = "manual" ]; then
          echo "Domain: ${{ steps.trigger-info.outputs.domain }}" >> summary.md
          echo "Operation: ${{ steps.trigger-info.outputs.operation }}" >> summary.md
        else
          echo "PR: #${{ steps.pr-info.outputs.pr-number }} - ${{ steps.pr-info.outputs.pr-title }}" >> summary.md
          echo "Operation: ${{ steps.handle-whois-pr.outputs.operation }}" >> summary.md
        fi
        
        # Read DNS sync result
        if [ -f ".github/scripts/dns-sync-result.json" ]; then
          echo "" >> summary.md
          echo "Result:" >> summary.md
          cat .github/scripts/dns-sync-result.json | jq -r '. | to_entries | .[] | "- " + .key + ": " + (.value | tostring)' >> summary.md
        fi

    # Comment on PR (only for PR trigger)
    - name: Comment on PR
      if: always() && steps.trigger-info.outputs.trigger_type == 'pr_merge' && steps.pr-info.outputs.pr-title != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.MY_GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          let syncResult;
          try {
            const resultData = fs.readFileSync('.github/scripts/dns-sync-result.json', 'utf8');
            syncResult = JSON.parse(resultData);
          } catch (error) {
            console.error('Error reading DNS sync result:', error);
            syncResult = {
              success: false,
              error: 'Failed to read DNS sync results',
              timestamp: new Date().toISOString()
            };
          }
          
          const prNumber = '${{ steps.pr-info.outputs.pr-number }}';
          const prTitle = '${{ steps.pr-info.outputs.pr-title }}';
          
          // Build comment content
          let commentBody = '';
          
          if (syncResult.success) {
            commentBody = `✅ **DNS Sync Successful**\n\n`;
            commentBody += `**Operation Type:** ${syncResult.operation}\n`;
            commentBody += `**Domain:** ${syncResult.domain}\n`;
            if (syncResult.nameservers) {
              commentBody += `**Nameservers:** ${syncResult.nameservers.join(', ')}\n`;
            }
            commentBody += `**Message:** ${syncResult.message}\n`;
            commentBody += `**Time:** ${new Date(syncResult.timestamp).toLocaleString('en-US')}\n`;
          } else {
            commentBody = `❌ **DNS Sync Failed**\n\n`;
            commentBody += `**Error:** ${syncResult.error}\n`;
            commentBody += `**Time:** ${new Date(syncResult.timestamp).toLocaleString('en-US')}\n`;
            commentBody += `\nPlease check PowerDNS Admin configuration and network connection.`;
          }
          
          // Find existing DNS sync comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: parseInt(prNumber)
          });
          
          const dnsSyncComments = comments.filter(comment => 
            comment.user.login === 'github-actions[bot]' && 
            (comment.body.includes('DNS Sync Successful') || comment.body.includes('DNS Sync Failed'))
          );
          
          // Delete old DNS sync comments
          for (const comment of dnsSyncComments) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: comment.id
            });
          }
          
          // Add new comment
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: parseInt(prNumber),
            body: commentBody
          });

    # Create commit status (only for PR trigger)
    - name: Create commit status
      if: always() && steps.trigger-info.outputs.trigger_type == 'pr_merge' && steps.pr-info.outputs.merge-sha != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.MY_GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          let syncResult;
          try {
            const resultData = fs.readFileSync('.github/scripts/dns-sync-result.json', 'utf8');
            syncResult = JSON.parse(resultData);
          } catch (error) {
            syncResult = {
              success: false,
              error: 'Failed to read DNS sync results'
            };
          }
          
          const mergeSha = '${{ steps.pr-info.outputs.merge-sha }}';
          const prTitle = '${{ steps.pr-info.outputs.pr-title }}';
          
          const state = syncResult.success ? 'success' : 'failure';
          const description = syncResult.success 
            ? `DNS Sync Successful: ${syncResult.message}`
            : `DNS Sync Failed: ${syncResult.error}`;
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: mergeSha,
            state: state,
            description: description.substring(0, 140),
            context: 'DNS Sync'
          });

    # Upload run summary as artifact
    - name: Upload run summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dns-sync-summary-${{ github.run_id }}
        path: summary.md
        retention-days: 30 